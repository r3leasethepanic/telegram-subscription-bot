
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import Dispatcher
from states import Form
from utils import is_valid_email, is_valid_phone

async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await Form.email.set()

async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    if not is_valid_email(email):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX):")
    await Form.phone.set()

async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not is_valid_phone(phone):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await Form.city.set()

async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    result = (
        f"üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

"
        f"üìß Email: {data['email']}
"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
"
        f"üåÜ –ì–æ—Ä–æ–¥: {data['city']}
"
        f"üë§ Telegram: @{username}"
    )
    await message.answer(result)
    await state.finish()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=["start", "subscribe"], state="*")
    dp.register_message_handler(process_email, state=Form.email)
    dp.register_message_handler(process_phone, state=Form.phone)
    dp.register_message_handler(process_city, state=Form.city)
