from aiogram import F
from aiogram.types import Message
from aiogram import Dispatcher
from bot.getcourse import add_user

def register_handlers(dp: Dispatcher):
    @dp.message(F.text == "/start")
    async def start_handler(message: Message):
        tg_username = message.from_user.username
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π Email:")
        dp.message.middleware.register(CollectDataMiddleware(tg_username))

class CollectDataMiddleware:
    def __init__(self, tg_username):
        self.tg_username = tg_username
        self.state = {}

    async def __call__(self, handler, event, data):
        user_id = event.from_user.id
        text = event.text
        if user_id not in self.state:
            self.state[user_id] = {"step": 1, "username": self.tg_username}

        step = self.state[user_id]["step"]
        if step == 1:
            self.state[user_id]["email"] = text
            self.state[user_id]["step"] = 2
            await event.answer("üì± –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ +):")
            return
        elif step == 2:
            phone = text.strip()
            if not phone.isdigit():
                await event.answer("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            self.state[user_id]["phone"] = phone
            self.state[user_id]["step"] = 3
            await event.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
            return
        elif step == 3:
            self.state[user_id]["city"] = text
            self.state[user_id]["step"] = 4
            await event.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
            await add_user(self.state[user_id])
            await event.answer("üü¢ –ì–æ—Ç–æ–≤–æ. –í–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
            del self.state[user_id]
            return
        await handler(event, data)
